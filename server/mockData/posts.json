[{
  "_id": {
    "$oid": "643bf011736e2279994870bc"
  },
  "title": "VueJS",
  "text": "# Улучшение реактивности с помощью VueUse\nVueUse — это библиотека из более чем 200 служебных функций, которые можно использовать для взаимодействия с целым рядом API, включая интерфейсы для браузера, состояния, сети, анимации и времени. Эти функции позволяют разработчикам легко добавлять реактивные возможности в свои проекты Vue.js, помогая им с легкостью создавать мощные и отзывчивые пользовательские интерфейсы.\n\nОдна из самых интересных фич VueUse — поддержка прямого манипулирования реактивными данными. Это означает, что разработчики могут запросто обновлять данные в режиме реального времени, не используя сложный и подверженный ошибкам код. Благодаря этому легко создавать приложения, которые могут реагировать на изменения в данных и соответствующим образом обновлять пользовательский интерфейс без необходимости ручного вмешательства.\n\nЦель этой статьи — изучить некоторые утилиты VueUse, которые помогут нам улучшить реактивность в нашем приложении Vue 3.",
  "tags": [
    "frontend",
    "vue"
  ],
  "viewsCount": 6,
  "commentsCount": 1,
  "user": {
    "$oid": "643befad736e2279994870b2"
  },
  "imageUrl": "/upload/logo-vuejs-9686556.png",
  "comments": [
    {
      "$oid": "643bf021736e2279994870c8"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1681649681172"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1681814368896"
    }
  },
  "__v": 0
},{
  "_id": {
    "$oid": "643bf3fad98c530eb2b7c4f9"
  },
  "title": "Философия React",
  "text": "# Философия React\n## Начнём с макета\nПредставьте, что у вас уже есть JSON API и макет дизайна сайта. Вот как он выглядит:\n![](https://ru.reactjs.org/static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png)\n\nНаш JSON API возвращает данные, которые выглядят так:\n```\n[\n  {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n  {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n  {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n  {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n  {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n  {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n];\n```\n",
  "tags": [
    "frontend",
    "react"
  ],
  "viewsCount": 10,
  "commentsCount": 2,
  "user": {
    "$oid": "643befad736e2279994870b2"
  },
  "imageUrl": "/upload/1.png",
  "comments": [
    {
      "$oid": "643bf428d98c530eb2b7c509"
    },
    {
      "$oid": "643e77789f8df08a24964584"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1681650682732"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1681815416635"
    }
  },
  "__v": 0
},{
  "_id": {
    "$oid": "643e76f89f8df08a2496453c"
  },
  "title": "Введение в Angular",
  "text": "# Что такое Angular. Первый проект\nAngular представляет фреймворк от компании Google для создания клиентских приложений. Прежде всего он нацелен на разработку SPA-решений (Single Page Application), то есть одностраничных приложений. В этом плане Angular является наследником другого фреймворка AngularJS. В то же время Angular это не новая версия AngularJS, а принципиально новый фреймворк.\n\nAngular предоставляет такую функциональность, как двустороннее связывание, позволяющее динамически изменять данные в одном месте интерфейса при изменении данных модели в другом, шаблоны, маршрутизация и так далее.\n\nОдной из ключевых особенностей Angular является то, что он использует в качестве языка программирования TypeScript. Поэтому перед началом работы рекомендуется ознакомиться с основами данного языка, про которые можно прочитать здесь.\n\nНо мы не ограничены языком TypeScript. При желании можем писать приложения на Angular с помощью таких языков как Dart или JavaScript. Однако TypeScript все таки является основным языком для Angular.\n\n## Начало работы c Angular\nДля работы с Angular необходимо установить сервер Node.js и пакетный менеджер npm, если они отсутствуют на рабочей машине. При этом особого какого-то знания для работы с NodeJS и npm не требуется. Для установки можно использовать программу установки node.js. Вместе с сервером она также установит и npm.\n\nСледует учитывать, что Angular 15 поддерживает те версии node.js, которые в текущий момент находятся в статусе \"Active LTS\" или \"Maintenance LTS\". На момент написания данной статьи это версии 16 и 18. Поэтому, если Node.js уже ранее был установлен, но имеет более старую или, наоборот новую, но еще не поддерживаемую версию, то лучше его обновить. Проверить совместимость версий node.js (а также версий typescript и библиотеки RxJS) для определенных версий Angular можно по адресу: [https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3](https://gist.github.com/LayZeeDK/c822cc812f75bb07b7c55d07ba2719b3).\n\nТо же самое касается и npm. Если версия слишком старая или, наоборот, одна из последних, то Angular может ее не поддерживать. При работе с Angular лучше полагаться на ту версию npm, которая устанавливается вместе с LTS-версией Node.js.\n\nПосле установки необходимых инструментов создадим простейшее приложение. Для этого определим на жестком диске папку приложения. Путь она будет называться helloapp.\n## Установка Angular CLI\nДля компиляции приложения мы будем использовать инфрастуктуру Angular CLI. Angular CLI упрощает создание приложения, его компиляцию. Angular CLI распространяется как пакет npm, поэтому для его использования его необходимо сначала установить. Для установки Angular CLI откроем консоль/командную строку и выполним в ней следующую команду:\n```\nnpm install -g @angular/cli\n```\nДанная команда установит пакет @angular/cli в качестве глобального модуля, поэтому в последующем при создании новый проектов Angular его не потребуется устанавливать заново.\n\nТу же команду можно использовать для обновления Angluar CLI при выходе новой версии фреймворка. Проверить версию CLI можно в командной строке/консоли с помощью команды:\n```\nng version\n```\nПри работе на Windows и выполнении команд в PowerShell вместо командной строки стоит учитывать, что по умолчанию выполнение скриптов в PowerShell отключено. Чтобы разрешить выполнение скриптов... (продолжение в [источнике](https://metanit.com/web/angular2/1.1.php))",
  "tags": [
    "frontend",
    "angular"
  ],
  "viewsCount": 5,
  "commentsCount": 0,
  "user": {
    "$oid": "643e74fd9f8df08a24964535"
  },
  "imageUrl": "https://scobars-blog.onrender.com/upload/angular.png",
  "comments": [],
  "createdAt": {
    "$date": {
      "$numberLong": "1681815288450"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1681815393847"
    }
  },
  "__v": 0
},{
  "_id": {
    "$oid": "643e79769f8df08a2496459d"
  },
  "title": "Подлые конкуренты, вымогатели и двойные агенты: как мы боролись с хакерскими атаками на клиентов",
  "text": "> Представьте, в один прекрасный день вы просыпаетесь и узнаете, что сегодня — День конституции Украины. И сообщают об этом не новости, а ваш собственный сайт, где вы и не думали размещать ничего подобного. За 9 лет управления студией разработки Code Pilots у меня накопилось несколько историй о кибербезопасности, которыми хочу поделиться с вами.\n\n## Сохраните пароли, это же так удобно!\nВпервые задуматься об ИТ безопасности меня сподвигла ситуация в далеком 2007 году. Будучи фрилансером, я насохранял пароли в Total Commander (популярный в то время файловый менеджер для обновления сайтов), передал ноутбук новому владельцу и благополучно об этом забыл. Но спустя год несколько клиентов, с которыми я работал, были взломаны. Источник утечки, удалось определить почти сразу — новый владелец позвонил и пожаловался, что его компьютер был взломан. Это был хороший урок, так как избавлять сайты клиентов от нечисти пришлось не один день, и это было не самое приятное занятие. После того случая я сделал выводы и нашел куда более надежные места для хранения паролей.\n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/47e/4b2/96d/47e4b296d57116af1755081ed6224b56.png)\n\nНо даже стойкий пароль, сохраненный в надежном месте, не спасет от утечки через небезопасный протокол (например, HTTP и FTP). Многие ошибочно полагают, что такой сценарий крайне маловероятен. Но только на моей практике было несколько случаев взлома сайтов через перехват трафика в общедоступном Wi‑Fi в кафе. \n1.     Вывод первый: храните пароли в сберегательной кассе специальном менеджере паролей. Например, в бесплатном Keepass или в также облачном Bitwarden.\n2.     Вывод второй: лучше забыть про HTTP и FTP, особенно если вы работаете в публичных местах.\n## Я у мамы хакер\nСледующее столкновение было уже интереснее. К нам в Code Pilots пришел новый клиент, форум которого регулярно взламывали. Поскольку взломщик не сильно прятался, владельцу даже были известны его контакты и имя. Взломщик преследовал непонятные цели: по мелочи, но регулярно нарушал работу сайта и доставлял серьезные неудобства заказчику. \n\nПоймать уязвимость, которой он пользовался, получилось не с первого раза. Ведь сайт был старый, и до этого им почти не занимались. А взломщик уже оставил себе с десяток лазеек. Поэтому удаляя их одну за другой, на следующий день мы все-равно обнаруживали, что доступ к сайту есть не только у нас. Спасло детальное протоколирование всех запросов — именно так мы нашли самый изящный, лаконичный и неприметный бекдор (лазейку) примерно следующего вида:\n\n```\nassert(@$_COOKIE[‘123’])\n```\nПолучается, что в обычных журналах запросов такой запрос ничем не будет выделяться. И обнаружить такую закладку довольно проблематично.\n\nКак он изначально получил доступ к сайту? Через систему контроля версий, которую предыдущие разработчики забыли закрыть от публичного доступа, да еще по невнимательности сохранили туда некоторые пароли. \n## День конституции\nОднажды нам позвонил клиент и пожаловался, что его сайт выглядит совсем не так, как должен. В частности, он пестрит политическими лозунгами, и поздравлениями с Днем конституции Украины. Очевидно, произошел взлом сайта и последующий дефейс (замена содержимого).\n\nОткатить все правки и вернуть сайт в исходное состояние можно было почти мгновенно. Ведь были резервные копии, да и система контроля версий явно показывала, какие страницы менялись. Но у нас была задача важнее: понять, как именно взломщики попали на сайт, чтобы не допустить повторения ситуации. \n\nПосле тщательного анализа было установлено, что злоумышленники воспользовались на тот момент еще не широко известной уязвимостью в коде Битрикса. Через нее попали на сайт и внесли нужные им правки. Всё было сделано меньше чем за минуту — ведь чаще всего такие взломы проводятся автоматически, без участия человека.\n\nОпределив причину, мы закрыли уязвимость, вернули сайт к прежнему виду и написали подробный отчет клиенту. А заодно закрыли подобные уязвимости у всех клиентов Code Pilots.\n\nНекоторым нашим знакомым повезло меньше: они заметили взлом лишь на третий день. И было уже поздно — у них хранилась только одна резервная копия за предыдущий день. Такаким образом, спустя три дня, в единственной резервной копии оказалась уже взломанная версия.\n1. Вывод первый: регулярно обновляйте ваше ПО.\n2. Вывод второй: обязательно делайте регулярные бекапы в отдельную локацию. Хорошей практикой является сохранение последних 7 дней, 4х последних понедельников, 12 первых чисел каждого месяца. Это сведет к минимуму риск потери данных\n## Хакер, который всех сдал\nЧаще всего мы сталкиваемся с DDoS-атаками: когда к сайту делается так много запросов, что он не справляется с нагрузкой и перестает нормально работать. \n\nКазалось бы, кому нужно выводить из строя сайты малого бизнеса? Тем не менее, регулярно находятся те, кто заказывает такие услуги и те, кто их выполняет. Но можно пойти еще дальше: стать двойным агентом и заработать не только на выполнении такого заказа, но и на сдаче самих заказчиков. \n\nЭто и произошло с нашим клиентом: после того, как его сайт перестал работать, ему в Телеграм написал исполнитель атаки. С уникальным предложением: за $300 он не только прекратит атаку, но и сдаст своего заказчика, который (вот сюрприз) оказался непорядочным и не оплатил всю сумму. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/514/d10/cd0/514d10cd089b2dde3d41167fa8c7bd63.png)\n\nПока клиент вел задушевную беседу с атакующим, мы оперативно прятали сервер в новой локации и возвращали сайт в работоспособное состояние. К концу диалога, сайт снова заработал и какая-либо сделка потеряла актуальность. Впрочем, в любом случае, никто не собирался платить террористам.\n1. Вывод первый: лучше заранее позаботиться о том, чтобы ваш сайт работал за сервисом по защите от DDoS. Это позволит либо в целом избежать подобных атак, либо быстрее принять меры.\n2. Вывод второй: если у вас нет постоянной команды поддержки сайта, имейте наготове все доступы: к сайту, к серверу, к хостингу и к DNS. Это позволит не тратить драгоценное время на их поиски. Не забываем, что они должны храниться в менеджере паролей, а не в заметке на рабочем столе.\n\n## Анонимный доброжелатель\nЕще одна разновидность уже описанной атаки, но в довольно оригинальной упаковке!\n\nВладельцу интернет-магазина пишет некий специалист по безопасности, который заявляет, что на сайте есть уязвимость. У него, конечно, есть подробное описание проблемы и путей ее устранения. За этот документ он просит заплатить круглую сумму в криптовалюте. А чтобы не быть голословным, вежливо ее демонстрирует: раз, и как по щелчку сайт перестает открываться.\n\nИ все бы ничего, но даже поверхностный анализ ситуации показывает, что сайт не работает не из-за какой-то уязвимости, а из-за большого числа запросов — всё тот же DDoS!\n\nКлиент берет паузу для того, чтобы “пообщаться с руководством” и тянет время. Параллельно мы принимаем меры, чтобы выдержать любую нагрузку. И вот момент истины: наш “специалист по безопасности” снова на связи и настойчиво требует, чтобы мы скорее принимали решение:\n\n— Ну что вы решили?\n\n— Вот, у нас даже всё руководство собралось, чтобы убедиться, что проблема реальна. Можете показать, как сайт перестанет работать?\n\n— Да, конечно, смотрите\n\n(начинается шквал запросов к сайту, но… он выдерживает нагрузку!)\n\n— …?! (замешательство на том конце провода)\n\n— Кажется, это банальный DDoS… До свидания!\n\nТак мы сэкономили несколько сотен тысяч рублей для нашего клиента и получили невероятные эмоции от наблюдения за безуспешными попытками атакующих.\n\nПриятно быть на светлой стороне и помогать клиентам отбиваться от разного рода мошенников и паразитов. Помимо экономии существенных сумм, подобные истории еще и здорово поднимают боевой дух команды. \n\nБыли ли у вас подобные истории? Буду рад увидеть их в комментариях!",
  "tags": [
    "habr",
    "хакеры"
  ],
  "viewsCount": 5,
  "commentsCount": 1,
  "user": {
    "$oid": "643e74fd9f8df08a24964535"
  },
  "imageUrl": "https://scobars-blog.onrender.com/upload/24db5b3f79c3837eab0e2d74228524ab.jpeg",
  "comments": [
    {
      "$oid": "643e79d69f8df08a249645af"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1681815926333"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1681816022701"
    }
  },
  "__v": 0
},{
  "_id": {
    "$oid": "643e7bec9f8df08a249645c6"
  },
  "title": "Практические советы по написанию чистого кода для автоматизации тестирования",
  "text": "Программирование является необходимым навыком для инженеров по автоматизации тестирования. Однако важно писать чистый код, который понятен и удобен в обслуживании. В этом посте я расскажу, что такое чистый код и зачем он нужен, а также поделюсь 5 практическими советами по написанию чистого кода. \n\n## Что такое чистый код? \n\nЧистый код — это код на языке программирования, который легко понять и легко поддерживать. Это означает, что код легко использовать и он не имеет непредвиденных последствий при обновлении. Кроме того, чистый код позволяет нескольким людям работать над проектом и следовать согласованным рекомендациям. \n\nС чистым кодом задачи легко решаются. Каждое решение проблемы начинается с алгоритма. Алгоритм — это план, переведенный в шаблон проектирования. Эффективным шаблоном является Page Object Model, который определяет каждую веб-страницу как файл класса. \n\nЦелью файла класса является инкапсуляция данных и поведения модели. Page Object Model инкапсулирует данные, создав репозиторий для хранения полей. Он моделирует поведение, определяя действия для этих полей. Например, на изображениях ниже показана страница поиска Google, 2 файла классов и страница результатов Google. \n\nНа странице поиска Google пользователь может осуществлять поиск с помощью текстового поля поиска и кнопки Google Search. В результате объектная модель страницы демонстрирует чистый код, отделяя хранилище от действий. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/c72/9d8/734/c729d873410ec5b175478e6a710ae680.png)\n\nФайл 1-го класса представляет собой шаблон проектирования Page Object Model. \n\n* searchField и searchButton инкапсулированы с помощью модификатора частного доступа \n* setSearchField и clickSearchButton моделируют поведение, выполняемое на веб-странице. Метод setSearchField() выполняет действие, позволяющее пользователю вводить текст. В этом файле класса метод clickSearchButton() выполняет действие нажатия кнопки поиска Google. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/215/afd/271/215afd2710eb7ef7f9e04c78f0228f9f.png)\n\nФайл второго класса служит в качестве тестового файла. Он проверяет домашнюю страницу Google. \n\n* Первый шаг вызывает метод setSearchField() и устанавливает поле поиска в “ACCELQ Automation Tool - Web и API Automation” \n* Второй шаг вызывает метод clickSearchButton() и нажимает кнопку поиска Google \n\nПосле нажатия на кнопку поиска Google, на следующей странице отображаются результаты для ACCELQ: \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/a91/def/edb/a91defedb6ae70572e419b71a7dd48af.png)\n\n## Зачем нужен чистый код? \n\nОдним из преимуществ написания чистого кода является читаемость. Читаемость кода очень важна, так как она может сделать понятным процесс расширения и модификации программы. Кроме того, читабельность кода снижает вероятность путаницы между командой по автоматизации тестирования. \n\nЭто помогает, потому что вся жизнь проекта редко поддерживается его первоначальными авторами. Ниже приведен список вопросов, позволяющих определить, является ли код автоматизации чистым: \n\n* Насколько легко будет поддерживать этот код? \n* Сложно ли обновлять этот код в случае изменения тестируемого приложения? \n* Может ли другой инженер просмотреть этот код и разобраться в сценарии тестирования? \n\n## Советы по написанию чистого кода \n\nС практической точки зрения написание чистого кода приходит со временем и усилиями. Хотя существуют определенные конвенции по написанию чистого кода, большинство ссылок на чистый код субъективны. Ниже приведен список принятых советов по написанию чистого кода. \n\n## Используйте описательные имена \n\nЧто означает слово totpt? Это переменная для общей суммы цены и налога. Ценное описательное название для того же упоминания - totalPriceTax. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/d78/032/51c/d7803251cb5527372ec3021666d8ed22.png)\n\nКод гораздо легче читать, если мы пишем полное имя. Нет смысла писать полное имя во время объявления, так как в IDE есть встроенная система завершения кода. Переменные должны точно определять, какие данные они хранят. Имя, которое мы определяем для классов и методов/функций, должно раскрывать их назначение, выполняя две задачи: \n\n1. Что оно делает в программе? \n2. Как оно будет применяться в программе? \n\nКонвенция о написании констант, классов и методов/функций включает в себя следующее: \n\n* Константы должны быть написаны в верхнем регистре, слова разделяются подчеркиванием (_). \n* Классы должны быть существительными \n* Методы/функции должны быть глаголами \n\nОписательное имя является подробным и конкретным. Например, в приложении есть названия продуктов и имена клиентов. Конкретное имя метода/функции - getProductName(), а не getName(). Метод getName() не является конкретным или подробным, потому что трудно понять, извлекает ли код продукты или клиентов. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/b64/355/1d3/b643551d33dda75ff8b6d76e3cb1ee7c.png)\n\n## Реализуйте одно действие для каждого метода/функции \n\nЧистый код разбивает многочисленные шаги автоматизации на фрагменты. Если сценарий тестирования состоит из множества шагов, то эти шаги делятся на части кода. Фундаментальное программирование направлено на то, чтобы каждый метод/функция выполняли только одно действие. \n\nВ результате инженер по автоматизации тестирования не будет включать различные шаги в один метод/функцию. Например, объектная модель страницы для поиска в Google не должна объединять ввод текста и нажатие кнопки Google Search в одном методе/функции. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/ac0/99b/fa3/ac099bfa32167ecf33b0fad31b241068.png)\n\nЕсли метод/функция содержит 'And' в своем имени, то, вероятно, лучше всего сократить метод/функцию, чтобы они выполняли свою собственную задачу. Однако есть исключение для удобного метода/функции. Удобные методы/функции достигают одной цели, но содержат более одного шага. \n\nВ качестве примера можно привести вход в приложение. Он выполняет только одно действие, но включает в себя ввод имени пользователя, ввод пароля и нажатие кнопки входа. Все три действия могут быть объединены в logIntoApplication() и/или выделены в отдельные шаги. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/22e/033/31f/22e03331fdfc1f592cbbb79027c6861a.png)\n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/a0c/158/884/a0c158884992209cfb65ec94f038e310.png)\n\n## Принцип DRY  \n\nDRY - это аббревиатура от Don't Repeat Yourself. Если в нашем проекте есть один и тот же код в разных местах, то мы можем рассмотреть возможность создания метода/функции для этого кода. Разработка метода/функции помогает нашему коду стать многократно используемым и избежать повторений. \n\nНекоторые преимущества принципа DRY заключаются в уменьшении размера базы кода и более быстром понимании кода. Кроме того, поддерживать код намного проще, поскольку метод/функция находится в одном месте. После модификации кода изменение отражается во всех областях, вызывающих метод/функцию. \n\n## Рефакторинг и удаление ненужного кода \n\nРефакторинг кода — это операция по перестройке кода без изменения его первоначальной функциональности. Он улучшает код с помощью небольших обновлений, чтобы сделать дизайн и реализацию лучше. Рефакторинг также уменьшает сложность кода. \n\nИногда при улучшении проекта старый код комментируется, а не удаляется из проекта. Лучше удалить ненужный код, чтобы не загромождать исходные файлы. Иногда старый код оказывается неэффективным, если его вернуть в проект. \n\n## Пишите хорошие комментарии \n\nЦель комментария - сделать наш исходный код более понятным и при этом игнорируемым компиляторами и интерпретаторами. Хорошее правило - комментарии должны объяснять \"зачем\" существует наш код, а не \"что\" он делает. \n\n![](https://habrastorage.org/r/w1560/getpro/habr/upload_files/629/377/54a/62937754a98fe1c9b6423ddc94d2a238.png)\n\nЕсли мы пишем чистый код, то код должен говорить сам за себя. Он объясняет, почему код был написан, чтобы пролить свет на его замысел. Примером уместного комментария может служить объяснение стороннего API разработчика, чтобы вы и ваша команда могли получить разъяснения. Вот пример некоторых неактуальных комментариев: \n\n* Введите имя пользователя \n* Введите пароль \n* Нажмите кнопку входа \n\nНаписание чистого кода имеет решающее значение, поскольку он обеспечивает связь со следующим инженером по автоматизации тестирования. Главное в чистом коде — писать для читателя. Будет сложно обновлять и расширять проект, если код не чистый. Поэтому мы должны подумать о нашем товарище по команде, которому может быть, предстоит поддерживать код.",
  "tags": [
    "frontend",
    "тестирование",
    "habr"
  ],
  "viewsCount": 15,
  "commentsCount": 2,
  "user": {
    "$oid": "643e74fd9f8df08a24964535"
  },
  "imageUrl": "https://scobars-blog.onrender.com/upload/68eb92a113ee6d90a6df7b70a521701c.png",
  "comments": [
    {
      "$oid": "643e7c139f8df08a249645dc"
    },
    {
      "$oid": "643e7c8a9f8df08a2496465e"
    }
  ],
  "createdAt": {
    "$date": {
      "$numberLong": "1681816556831"
    }
  },
  "updatedAt": {
    "$date": {
      "$numberLong": "1681816729383"
    }
  },
  "__v": 0
}]